name: Build and Sign Flutter APK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Клонируем репозиторий
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полное клонирование

      # Отладка структуры
      - name: Debug Directory Structure
        run: |
          pwd
          ls -la
          ls -la lib/ || echo "lib/ not found"
          ls -la android/ || echo "android/ not found"
          ls -la pubspec.yaml || echo "pubspec.yaml not found"
          ls -la lib/main.dart || echo "lib/main.dart not found"
          ls -la test/widget_test.dart || echo "widget_test.dart not found"

      # Отладка Git
      - name: Debug Git
        run: |
          git config --list
          git remote -v

      # Устанавливаем Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Устанавливаем Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: false  # Отключаем кэш

      # Создаём lib/.env файл
      - name: Create lib/.env file
        run: |
          echo "GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }}" > lib/.env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> lib/.env
          cat lib/.env  # Отладка содержимого .env

      # Получаем зависимости
      - name: Get dependencies
        run: |
          flutter pub get
          cat pubspec.lock | grep google_fonts  # Отладка версии google_fonts

      # Отладка AndroidManifest
      - name: Verify AndroidManifest
        run: |
          cat android/app/src/main/AndroidManifest.xml | grep INTERNET || echo "INTERNET permission not found"

      # Генерируем иконки
      - name: Generate launcher icons
        run: flutter pub run flutter_launcher_icons
        continue-on-error: true

      # Запускаем тесты
      - name: Run tests
        run: flutter test
        continue-on-error: true

      # Декодируем keystore из Base64
      - name: Decode Keystore
        env:
          SIGNING_KEY: ${{ secrets.upload }}  # Используем upload
        run: |
          echo "$SIGNING_KEY" > temp.b64
          base64 --decode temp.b64 > android/app/upload-keystore.jks
          rm temp.b64

      # Проверяем наличие и целостность keystore
      - name: Verify Keystore and key.properties
        run: |
          ls -la android/app/
          file android/app/upload-keystore.jks || echo "Keystore file not found or invalid"
          keytool -list -keystore android/app/upload-keystore.jks -storepass ${{ secrets.KEY_STORE_PASSWORD }} || echo "Failed to read keystore"
          keytool -v -list -keystore android/app/upload-keystore.jks -storepass ${{ secrets.KEY_STORE_PASSWORD }} || echo "Failed to read keystore with verbose"
          cat android/key.properties || echo "key.properties not found"
          pwd
          find . -name "upload-keystore.jks"
          java -version

      # Создаём key.properties
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" > android/key.properties
          echo "storeFile=upload-keystore.jks" > android/key.properties

      # Отладка Gradle
      - name: Debug Gradle
        run: |
          ./gradlew --version
          cat android/app/build.gradle.kts | grep minifyEnabled || echo "minifyEnabled not found"

      # Собираем APK
      - name: Build APK
        run: flutter build apk --release --verbose

      # Загружаем подписанный APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk
